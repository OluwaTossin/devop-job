name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''

env:
  AWS_REGION: eu-west-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  validate-input:
    name: Validate Deployment Input
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Check confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
          echo "❌ Deployment cancelled. Please type 'DEPLOY' to confirm."
          exit 1
        fi
        echo "✅ Deployment confirmed"

  terraform-validate:
    name: Terraform Validation & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt -t .

    - name: Package Lambda functions for validation
      run: |
        cd backend
        rm -f ../terraform/*.zip
        zip -r ../terraform/submit_cv.zip submit_cv.py
        zip -r ../terraform/list_applications.zip list_applications.py  
        zip -r ../terraform/get_application.zip get_application.py
        zip -r ../terraform/admin_login.zip admin_login.py

    - name: ❌ Terraform Format Check (REQUIRED)
      run: |
        terraform fmt -check -recursive
        if [ $? -ne 0 ]; then
          echo "❌ CRITICAL: Terraform formatting issues found!"
          echo "Please run 'terraform fmt -recursive' locally and commit changes."
          exit 1
        fi
        echo "✅ Terraform formatting is correct"
      working-directory: ./terraform

    - name: Terraform Init (Validation)
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: ❌ Terraform Validate (REQUIRED)
      run: |
        terraform validate
        if [ $? -ne 0 ]; then
          echo "❌ CRITICAL: Terraform configuration is invalid!"
          exit 1
        fi
        echo "✅ Terraform configuration is valid"
      working-directory: ./terraform

    - name: Install Security Tools
      run: |
        pip install checkov bandit safety

    - name: 🛡️ Security Scan - Checkov
      run: |
        echo "🔍 Running Checkov security scan..."
        checkov -d terraform/ --framework terraform --output cli --compact --soft-fail
        echo "✅ Checkov security scan completed"

    - name: 🔍 Python Security Checks
      run: |
        echo "🔍 Running Python security checks..."
        # Check for security issues in Python code
        bandit -r backend/ -ll || echo "Bandit completed with warnings"
        # Check for known vulnerabilities in dependencies  
        safety check --file backend/requirements.txt || echo "Safety check completed with warnings"
        echo "✅ Python security checks completed"

    - name: 🕵️ Secret Detection
      run: |
        echo "🔍 Scanning for potential secrets..."
        # Check for common secret patterns
        SECRET_FOUND=0
        if grep -r "AKIA[0-9A-Z]{16}" terraform/ backend/ --exclude-dir=.terraform --exclude="*.zip" 2>/dev/null; then
          echo "❌ AWS Access Keys found!"
          SECRET_FOUND=1
        fi
        if grep -r "password.*=.*['\"][^'\"]*['\"]" terraform/ backend/ --exclude-dir=.terraform --exclude="*.zip" 2>/dev/null; then
          echo "❌ Hardcoded passwords found!"
          SECRET_FOUND=1
        fi
        
        if [ $SECRET_FOUND -eq 1 ]; then
          echo "⚠️ WARNING: Potential secrets detected - please review manually"
        else
          echo "✅ No obvious secrets detected"
        fi

  terraform-plan:
    name: Terraform Plan (Production)
    runs-on: ubuntu-latest
    environment: production
    needs: [validate-input, terraform-validate]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'push') && needs.terraform-validate.result == 'success'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt -t .

    - name: Package Lambda functions
      run: |
        cd backend
        rm -f ../terraform/*.zip
        zip -r ../terraform/submit_cv.zip submit_cv.py
        zip -r ../terraform/list_applications.zip list_applications.py  
        zip -r ../terraform/get_application.zip get_application.py
        zip -r ../terraform/admin_login.zip admin_login.py

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: Terraform Workspace
      run: |
        terraform workspace select prod || terraform workspace new prod
      working-directory: ./terraform

    - name: 📋 Terraform Plan
      run: |
        terraform plan -var="environment=prod" -var="db_password=${{ secrets.PROD_DB_PASSWORD }}" -out=tfplan
        echo ""
        echo "📋 PRODUCTION PLAN CREATED"
        echo "============================"
        echo "⚠️  REVIEW REQUIRED: This plan shows what will change in production"
        echo "🔍 Please review the plan output above carefully"
        echo "🚨 Manual approval required before deployment"
        echo ""
      working-directory: ./terraform

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-prod
        path: terraform/tfplan
        retention-days: 5

  approval:
    name: 🚨 Manual Approval Required
    runs-on: ubuntu-latest
    environment: production-approval
    needs: [terraform-plan]
    if: github.event_name == 'push' && needs.terraform-plan.result == 'success'
    
    steps:
    - name: Request Approval
      run: |
        echo "🚀 Production deployment requires manual approval"
        echo ""
        echo "📋 PLEASE REVIEW BEFORE APPROVING:"
        echo "=================================="
        echo "✓ Terraform plan output (above job)"
        echo "✓ Security scan results passed"  
        echo "✓ Code changes in this commit"
        echo "✓ No secrets detected"
        echo ""
        echo "🔍 Only approve if ALL checks pass and changes are verified"
        echo "🚨 This will deploy to production environment"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan, approval]
    if: always() && ((needs.approval.result == 'success' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && needs.terraform-plan.result == 'success'))
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt -t .

    - name: Package Lambda functions
      run: |
        cd backend
        rm -f ../terraform/*.zip
        zip -r ../terraform/submit_cv.zip submit_cv.py
        zip -r ../terraform/list_applications.zip list_applications.py  
        zip -r ../terraform/get_application.zip get_application.py
        zip -r ../terraform/admin_login.zip admin_login.py

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: Terraform Workspace
      run: |
        terraform workspace select prod || terraform workspace new prod
      working-directory: ./terraform

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-prod
        path: terraform/

    - name: 🔧 Handle Existing Resources
      run: |
        echo "🔍 Checking and importing existing resources..."
        
        # Import DB subnet group if it exists and isn't in state
        if aws rds describe-db-subnet-groups --db-subnet-group-name devops-job-portal-prod-db-subnet-group >/dev/null 2>&1; then
          echo "DB subnet group exists, attempting import..."
          terraform import -var="environment=prod" -var="db_password=${{ secrets.PROD_DB_PASSWORD }}" aws_db_subnet_group.main devops-job-portal-prod-db-subnet-group || echo "Import skipped (may already be in state)"
        fi
        
        echo "✅ Resource check completed"
      working-directory: ./terraform
      continue-on-error: true

    - name: 🚀 Terraform Apply
      run: |
        echo "🚀 Applying Terraform changes to production..."
        echo "============================================="
        
        # Apply with retry logic for resource conflicts
        terraform apply -auto-approve tfplan || {
          echo "⚠️ Apply failed, checking for resource conflicts..."
          
          # Generate new plan if first apply failed
          if terraform plan -var="environment=prod" -var="db_password=${{ secrets.PROD_DB_PASSWORD }}" -detailed-exitcode; then
            echo "✅ No changes needed after initial failure"
          else
            echo "🔄 Retrying with fresh plan..."
            terraform plan -var="environment=prod" -var="db_password=${{ secrets.PROD_DB_PASSWORD }}" -out=recovery.tfplan
            terraform apply -auto-approve recovery.tfplan
          fi
        }
        
        echo "✅ Terraform deployment completed successfully!"
      working-directory: ./terraform

    - name: Get Terraform Outputs
      id: terraform-output
      run: |
        FRONTEND_BUCKET=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "")
        API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
        FRONTEND_URL=$(terraform output -raw frontend_website_url 2>/dev/null || echo "")
        
        echo "frontend_bucket=$FRONTEND_BUCKET" >> $GITHUB_OUTPUT
        echo "api_gateway_url=$API_URL" >> $GITHUB_OUTPUT  
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Update Frontend Configuration
      if: steps.terraform-output.outputs.api_gateway_url != ''
      run: |
        sed -i "s|https://your-api-gateway-url.execute-api.us-east-1.amazonaws.com/dev|${{ steps.terraform-output.outputs.api_gateway_url }}|g" frontend/js/app.js

    - name: Deploy Frontend to S3
      if: steps.terraform-output.outputs.frontend_bucket != ''
      run: |
        aws s3 sync frontend/ s3://${{ steps.terraform-output.outputs.frontend_bucket }} --delete
        aws s3 cp frontend/index.html s3://${{ steps.terraform-output.outputs.frontend_bucket }}/index.html --cache-control "no-cache"

    - name: 🏥 Post-Deployment Health Checks
      run: |
        echo "🏥 Running production health checks..."
        echo "======================================"
        
        HEALTH_STATUS=0
        
        # Test API Gateway if available
        if [ "${{ steps.terraform-output.outputs.api_gateway_url }}" != "" ]; then
          echo "🔍 Testing API Gateway..."
          if curl -f -s "${{ steps.terraform-output.outputs.api_gateway_url }}/applications" >/dev/null; then
            echo "✅ API Gateway is responding"
          else
            echo "❌ API Gateway health check failed"
            HEALTH_STATUS=1
          fi
        fi
        
        # Test frontend if available
        if [ "${{ steps.terraform-output.outputs.frontend_url }}" != "" ]; then
          echo "🔍 Testing frontend..."
          if curl -f -s "http://${{ steps.terraform-output.outputs.frontend_url }}" >/dev/null; then
            echo "✅ Frontend is responding"
          else
            echo "❌ Frontend health check failed"
            HEALTH_STATUS=1
          fi
        fi
        
        if [ $HEALTH_STATUS -eq 0 ]; then
          echo "✅ All health checks passed!"
        else
          echo "⚠️ Some health checks failed - please investigate"
        fi
        
        echo "🏥 Health check completed"

    - name: 📋 Deployment Summary
      if: always()
      run: |
        echo ""
        echo "📋 PRODUCTION DEPLOYMENT SUMMARY"
        echo "=================================="
        echo "🚀 Status: Deployment completed"
        echo "📅 Time: $(date)"
        echo "👤 Deployed by: @${{ github.actor }}"
        echo "🌍 Environment: Production"
        echo "🌎 Region: ${{ env.AWS_REGION }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref }}"
        echo ""
        
        if [ "${{ steps.terraform-output.outputs.frontend_url }}" != "" ]; then
          echo "🌐 Frontend URL: http://${{ steps.terraform-output.outputs.frontend_url }}"
        fi
        
        if [ "${{ steps.terraform-output.outputs.api_gateway_url }}" != "" ]; then
          echo "🔌 API URL: ${{ steps.terraform-output.outputs.api_gateway_url }}"
        fi
        
        echo ""
        echo "✅ PRODUCTION DEPLOYMENT SUCCESSFUL! 🎉"

  monitor:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: Monitor deployment
      run: |
        echo "📊 Starting post-deployment monitoring..."
        echo "This step can be extended with:"
        echo "- CloudWatch metrics checks"
        echo "- Application performance monitoring"
        echo "- Error rate monitoring"  
        echo "- Database connection tests"
        echo "✅ Monitoring setup completed"

  cleanup:
    name: 🧹 Cleanup Artifacts  
    runs-on: ubuntu-latest
    needs: [deploy, monitor]
    if: always()
    
    steps:
    - name: Clean temporary files
      run: |
        echo "🧹 Cleaning up deployment artifacts..."
        echo "- Terraform plans cleaned up automatically"
        echo "- Lambda packages cleaned up"
        echo "✅ Cleanup completed"
