name: Deploy Dev, then Promote to Prod

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  AWS_REGION: eu-west-1
  TERRAFORM_VERSION: 1.6.0
  # Prod-specific toggles (used during promotion)
  USE_EXISTING_DB_SUBNET_GROUP: "true"
  EXISTING_DB_SUBNET_GROUP_NAME: "devops-job-portal-prod-db-subnet-group"

jobs:
  terraform-plan:
    name: Terraform Plan (Development)
    runs-on: ubuntu-latest
    # No environment gating for dev to keep pipeline simple
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt -t .

    - name: Package Lambda functions
      run: |
        cd backend
        # Package all Lambda handlers
        zip -r ../terraform/submit_cv.zip submit_cv.py
        zip -r ../terraform/list_applications.zip list_applications.py
        zip -r ../terraform/get_application.zip get_application.py
        zip -r ../terraform/admin_login.zip admin_login.py

        # Stabilize timestamps to avoid hash drift between jobs
        touch -t 202401010000 ../terraform/*.zip

    - name: Upload Lambda Packages
      uses: actions/upload-artifact@v4
      with:
        name: lambda-packages
        path: terraform/*.zip
        retention-days: 1

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      working-directory: ./terraform
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=dev/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: Terraform Workspace
      id: workspace
      run: |
        terraform workspace select dev || terraform workspace new dev
      working-directory: ./terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./terraform

    - name: Import existing dev resources (best-effort)
      run: |
        set -e
        echo "Importing known pre-existing dev resources to avoid AlreadyExists errors..."
        cd terraform

        # Secrets Manager secret
        SECRET_NAME="devops-job-portal-dev-admin-credentials"
        if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" >/dev/null 2>&1; then
          terraform state show aws_secretsmanager_secret.admin_credentials >/dev/null 2>&1 || terraform import aws_secretsmanager_secret.admin_credentials "$SECRET_NAME" || true
        fi

        # IAM Roles
        for ROLE in \
          devops-job-portal-dev-admin-login-lambda \
          devops-job-portal-dev-api-gateway-cloudwatch \
          devops-job-portal-dev-lambda-role \
          devops-job-portal-dev-rds-monitoring-role
        do
          aws iam get-role --role-name "$ROLE" >/dev/null 2>&1 || continue
          case "$ROLE" in
            *admin-login-lambda) terraform state show aws_iam_role.admin_login_lambda >/dev/null 2>&1 || terraform import aws_iam_role.admin_login_lambda "$ROLE" || true ;;
            *api-gateway-cloudwatch) terraform state show aws_iam_role.api_gateway_cloudwatch >/dev/null 2>&1 || terraform import aws_iam_role.api_gateway_cloudwatch "$ROLE" || true ;;
            *lambda-role) terraform state show aws_iam_role.lambda >/dev/null 2>&1 || terraform import aws_iam_role.lambda "$ROLE" || true ;;
            *rds-monitoring-role) terraform state show aws_iam_role.rds_monitoring >/dev/null 2>&1 || terraform import aws_iam_role.rds_monitoring "$ROLE" || true ;;
          esac
        done

        # CloudWatch Log Groups
        for LG in \
          /aws/lambda/devops-job-portal-dev-admin-login \
          /aws/lambda/devops-job-portal-dev-submit-cv \
          /aws/lambda/devops-job-portal-dev-list-applications \
          /aws/lambda/devops-job-portal-dev-get-application \
          /aws/apigateway/devops-job-portal-dev
        do
          aws logs describe-log-groups --log-group-name-prefix "$LG" --limit 1 | grep -q 'logGroupName' || continue
          case "$LG" in
            */admin-login) terraform state show aws_cloudwatch_log_group.admin_login >/dev/null 2>&1 || terraform import aws_cloudwatch_log_group.admin_login "$LG" || true ;;
            */submit-cv) terraform state show aws_cloudwatch_log_group.submit_cv >/dev/null 2>&1 || terraform import aws_cloudwatch_log_group.submit_cv "$LG" || true ;;
            */list-applications) terraform state show aws_cloudwatch_log_group.list_applications >/dev/null 2>&1 || terraform import aws_cloudwatch_log_group.list_applications "$LG" || true ;;
            */get-application) terraform state show aws_cloudwatch_log_group.get_application >/dev/null 2>&1 || terraform import aws_cloudwatch_log_group.get_application "$LG" || true ;;
            */dev) terraform state show aws_cloudwatch_log_group.api_gateway >/dev/null 2>&1 || terraform import aws_cloudwatch_log_group.api_gateway "$LG" || true ;;
          esac
        done

        # S3 Buckets
        for B in devops-job-portal-dev-frontend devops-job-portal-dev-cv-storage; do
          aws s3api head-bucket --bucket "$B" >/dev/null 2>&1 || continue
          case "$B" in
            *-frontend) terraform state show aws_s3_bucket.frontend >/dev/null 2>&1 || terraform import aws_s3_bucket.frontend "$B" || true ;;
            *-cv-storage) terraform state show aws_s3_bucket.cv_storage >/dev/null 2>&1 || terraform import aws_s3_bucket.cv_storage "$B" || true ;;
          esac
        done
      shell: bash

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -var="environment=dev" -out=tfplan
      working-directory: ./terraform
      continue-on-error: true

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-dev
        path: terraform/tfplan
        retention-days: 3

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  deploy:
    name: Deploy to Development
    needs: terraform-plan
    runs-on: ubuntu-latest
    # No environment gating for dev to keep pipeline simple
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt -t .

    - name: Download Lambda Packages
      uses: actions/download-artifact@v4
      with:
        name: lambda-packages
        path: terraform/

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=dev/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: Terraform Workspace
      run: |
        terraform workspace select dev
      working-directory: ./terraform

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-dev
        path: terraform/

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve tfplan
      working-directory: ./terraform

    - name: Get Terraform Outputs
      id: terraform-output
      run: |
        set -e
        FRONTEND_BUCKET=$(terraform output -raw frontend_bucket_name)
        API_URL=$(terraform output -raw api_gateway_url)
        # Try to read a website URL output; otherwise build the standard S3 website URL
        if terraform output -raw frontend_website_url >/dev/null 2>&1; then
          FRONTEND_URL=$(terraform output -raw frontend_website_url)
        else
          FRONTEND_URL="http://${FRONTEND_BUCKET}.s3-website-${AWS_REGION}.amazonaws.com"
        fi
        echo "frontend_bucket=${FRONTEND_BUCKET}" >> $GITHUB_OUTPUT
        echo "api_gateway_url=${API_URL}" >> $GITHUB_OUTPUT
        echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Update Frontend Configuration
      run: |
        sed -i "s|https://your-api-gateway-url.execute-api.us-east-1.amazonaws.com/dev|${{ steps.terraform-output.outputs.api_gateway_url }}|g" frontend/js/app.js

    - name: Deploy Frontend to S3
      run: |
        aws s3 sync frontend/ s3://${{ steps.terraform-output.outputs.frontend_bucket }} --delete
        aws s3 cp frontend/index.html s3://${{ steps.terraform-output.outputs.frontend_bucket }}/index.html --cache-control "no-cache"

    - name: Invalidate CloudFront (if exists)
      run: |
        echo "CloudFront invalidation would go here if CDN is configured"
      continue-on-error: true

    - name: Publish Dev URLs
      run: |
        echo "‚úÖ Development deployment successful!" | tee -a $GITHUB_STEP_SUMMARY
        echo "Frontend URL: ${{ steps.terraform-output.outputs.frontend_url }}" | tee -a $GITHUB_STEP_SUMMARY
        echo "API URL: ${{ steps.terraform-output.outputs.api_gateway_url }}" | tee -a $GITHUB_STEP_SUMMARY

  test:
    name: Dev Smoke Tests
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init (dev)
      
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=dev/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: Terraform Workspace (dev)
      run: terraform workspace select dev
      working-directory: ./terraform

    - name: Read Terraform Outputs (dev)
      id: dev-out
      run: |
        echo "frontend_bucket=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
        echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        echo "frontend_url=http://$(terraform output -raw frontend_bucket_name).s3-website-${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Run basic health checks (dev)
      run: |
        set -e
        echo "Checking API: ${{ steps.dev-out.outputs.api_gateway_url }}/applications"
        curl -sSf "${{ steps.dev-out.outputs.api_gateway_url }}/applications" >/dev/null
        echo "Checking Frontend: ${{ steps.dev-out.outputs.frontend_url }}"
        curl -sSf "${{ steps.dev-out.outputs.frontend_url }}" >/dev/null
        echo "‚úÖ Dev environment looks healthy"

  prod-plan:
    name: Terraform Plan (Production)
    needs: [deploy, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Download Lambda Packages
      uses: actions/download-artifact@v4
      with:
        name: lambda-packages
        path: terraform/

    - name: Terraform Init (prod)
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: Terraform Workspace (prod)
      run: |
        terraform workspace select prod || terraform workspace new prod
      working-directory: ./terraform

    - name: Import Existing DB Instance (prod)
      run: |
        echo "üîç Ensuring DB instance is in Terraform state before planning..."
        DB_INSTANCE_ID="devops-job-portal-prod-database"

        if terraform state show aws_db_instance.main >/dev/null 2>&1; then
          echo "‚úÖ DB instance already tracked in Terraform state"
          terraform state show aws_db_instance.main | head -20 || true
        else
          echo "‚ÑπÔ∏è  DB instance not in state; attempting Terraform import..."
          set +e
          IMPORT_OUTPUT=$(terraform import aws_db_instance.main "$DB_INSTANCE_ID" 2>&1)
          IMPORT_CODE=$?
          set -e
          echo "$IMPORT_OUTPUT" | tail -n +1 | sed 's/^/terraform import: /'

          if [ $IMPORT_CODE -eq 0 ]; then
            echo "‚úÖ DB instance import successful"
          else
            if echo "$IMPORT_OUTPUT" | grep -qiE 'DBInstanceNotFound|not.?found|NoSuchEntity'; then
              echo "‚ÑπÔ∏è  DB instance not found in AWS; Terraform will create it if needed"
            else
              echo "‚ùå Import failed for a non-NotFound reason (likely permissions or conflict)."
              echo "‚õî Aborting to avoid generating a bad plan that will fail during apply."
              exit 1
            fi
          fi

          if terraform state show aws_db_instance.main >/dev/null 2>&1; then
            echo "üìã Post-import verification:"
            terraform state show aws_db_instance.main | head -20 || true
          fi
        fi
      working-directory: ./terraform

    - name: Ensure DB subnet group not tracked (prod)
      if: env.USE_EXISTING_DB_SUBNET_GROUP == 'true'
      run: |
        echo "üîß Using existing DB subnet group; ensuring Terraform state does not manage it..."
        if terraform state show aws_db_subnet_group.main >/dev/null 2>&1; then
          echo "üßπ Removing aws_db_subnet_group.main from state to avoid destroy/create"
          terraform state rm aws_db_subnet_group.main
        else
          echo "‚úÖ DB subnet group not in state (good)"
        fi
      working-directory: ./terraform

    - name: Terraform Validate (prod)
      run: terraform validate -no-color
      working-directory: ./terraform

    - name: Terraform Plan (prod)
      run: |
        terraform plan -no-color \
          -var="environment=prod" \
          -var="db_password=${{ secrets.PROD_DB_PASSWORD }}" \
          -var="use_existing_db_subnet_group=${{ env.USE_EXISTING_DB_SUBNET_GROUP }}" \
          -var="existing_db_subnet_group_name=${{ env.EXISTING_DB_SUBNET_GROUP_NAME }}" \
          -out=tfplan
      working-directory: ./terraform

    - name: Upload Plan (prod)
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-prod
        path: terraform/tfplan
        retention-days: 5

  prod-deploy:
    name: Deploy to Production (Approval Required)
    needs: prod-plan
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Download Lambda Packages
      uses: actions/download-artifact@v4
      with:
        name: lambda-packages
        path: terraform/

    - name: Terraform Init (prod)
      run: |
        terraform init \
          -backend-config="bucket=terraform-state-devops-job-portal" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-locks"
      working-directory: ./terraform

    - name: Terraform Workspace (prod)
      run: terraform workspace select prod
      working-directory: ./terraform

    - name: Download Plan (prod)
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-prod
        path: terraform/

    - name: Terraform Apply (prod)
      run: |
        echo "üöÄ Applying Terraform changes to production..."
        terraform apply -auto-approve tfplan
        echo "‚úÖ Terraform deployment completed"
      working-directory: ./terraform

    - name: Get Terraform Outputs (prod)
      id: terraform-output-prod
      run: |
        echo "frontend_bucket=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
        echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        echo "frontend_url=$(terraform output -raw frontend_website_url)" >> $GITHUB_OUTPUT
      working-directory: ./terraform

    - name: Update Frontend Configuration (prod)
      run: |
        sed -i "s|https://your-api-gateway-url.execute-api.us-east-1.amazonaws.com/dev|${{ steps.terraform-output-prod.outputs.api_gateway_url }}|g" frontend/js/app.js

    - name: Deploy Frontend to S3 (prod)
      run: |
        aws s3 sync frontend/ s3://${{ steps.terraform-output-prod.outputs.frontend_bucket }} --delete
        aws s3 cp frontend/index.html s3://${{ steps.terraform-output-prod.outputs.frontend_bucket }}/index.html --cache-control "no-cache"

    - name: Production Health Check
      run: |
        echo "üè• Running production health checks..."
        if curl -f "${{ steps.terraform-output-prod.outputs.api_gateway_url }}/applications" >/dev/null 2>&1; then
          echo "‚úÖ API Gateway is responding"
        else
          echo "‚ö†Ô∏è API Gateway health check failed"
        fi
        if curl -f "http://${{ steps.terraform-output-prod.outputs.frontend_url }}" >/dev/null 2>&1; then
          echo "‚úÖ Frontend is accessible"
        else
          echo "‚ö†Ô∏è Frontend health check failed"
        fi
        echo "‚úÖ Health checks completed"
      continue-on-error: true

    - name: Notify production deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!" | tee -a $GITHUB_STEP_SUMMARY
        echo "Frontend URL: http://${{ steps.terraform-output-prod.outputs.frontend_url }}" | tee -a $GITHUB_STEP_SUMMARY
        echo "API URL: ${{ steps.terraform-output-prod.outputs.api_gateway_url }}" | tee -a $GITHUB_STEP_SUMMARY
        echo "Deployed by: @${{ github.actor }}" | tee -a $GITHUB_STEP_SUMMARY
        echo "Commit: ${{ github.sha }}" | tee -a $GITHUB_STEP_SUMMARY